\documentclass[a4paper,12pt,oneside,notitlepage,onecolumn]{article}

\usepackage{ucs}
\usepackage[utf8x]{inputenc}

\usepackage{fontenc}
\usepackage{graphicx}

\usepackage[OT4]{fontenc}
\usepackage[polish]{babel}
\usepackage{polski}
\usepackage{indentfirst}
\usepackage{graphics}

\usepackage[dvips]{hyperref}

\author{Michał Bobowski, Zofia Abramowska, Jakub Meller}
\title{Dokumentacja do projektu AgentChess}

\begin{document}
  \maketitle
\section{Założenia wstępne}
Niniejszy projekt jest realizowany w ramach przedmiotu SAG.
Jego przedmiotem jest stworzenie prostego, bazującego na agentowym podejściu, modelu sztucznej inteligencji służącej do gry w szachy.
Silnik gry i warstwa graficzna zostaną oparte na istniejących rozwiązaniach.
Całość zostanie zrealizowana w języku programowania Scala.

\subsection{Figury}
Dla uporządkowania wiedzy dziedzinowej posługujemy się nazwami figur w wesji polskiej i angielskiej.
Są to kolejno:
\begin{itemize}
 \item Pion (ang. Pawn) - porusza się o jedno pole naprzód (ew. o dwa pola na początku), bije tylko po skosie.
 \item Skoczek (ang. Knight) - porusza się systemem dwa pola naprzód i jedno do boku w dowolnym kierunku.
 \item Goniec (ang. Bishop) - porusza się po skosie.
 \item Wieża (ang. Rook) - porusza się w pionie lub poziomie.
 \item Hetman (ang. Queen) - łączy ruchy wieży i gońca.
 \item Król (ang. King) - porusza się o jedno pole w dowolnym kierunku.
\end{itemize}

Na potrzeby projektu każda konkretna figura będzie posiadała unikalny identyfikator, składający się z jednego lub dwóch znaków.
Pierwszym znakiem identyfikatora jest pierwsza litera angielskiej nazwy, za wyjątkiem skoczka, który z przyczyn oczywistych przyjmie drugą literę tj. 'n'.
Dla rozróżnienia kolorów, figury czarne będą w przeciwieństwie do figur białych używały wielkich liter.
Drugi znak identyfikatora jest po prostu liczbą i nie występuje dla króla i hetmana.

\section{Opis algorytmu}
Główną cechą niniejszego algorytmu jest jego zorientowanie na agentowość.
Bezcelowe jest porównywanie go do algorytmów budujących drzewo rozwiązań, gdyż na pewno są one wydajniejsze.
Sukcesem projektu będzie stworzenie grywalnego, działającego w rozsądnym czasie programu.

\subsection{Architektura agentów}
Agenci są umieszczeni w architekturze wertykalnej.
Głównym mózgiem przedsięwzięcia jest super-agent, którego zdaniem jest wysyłanie żądań do agentów podrzędnych i przeprowadzanie wnioskowania dotyczącego wyboru ruchu.

Na niższym poziomie w hierarchii znajdują się agenci reprezentujący figury obsługiwane przez komputer.
Można rozważyć również stworzenie agentów dla figur obsługiwanych przez gracza, ale nie wydaje się to w tym momencie zasadne.
W kolejnych częściach opisany jest szczegółowy protokół komunikacji między agentami.

\subsection{Struktury pomocnicze algorytmu}
W tej sekcji zawarty jest opis pewnych abstrakcyjnych bytów, na podstawie których przeprowadzane jest wnioskowanie.

\subsubsection{Ocena heurystyczna}
Każda z figur biorących udział w grze posiada heurystyczną ocenę swojej przydatności, oznaczaną dalej jako H.
Nie czuję się specjalistą, ale wikipedia proponuje następującą wycenę:
\begin{itemize}
 \item H=1 dla piona
 \item H=3 dla skoczka i gońca
 \item H=5 dla wieży
 \item H=9 dla hetmana
\end{itemize}

Do kompletu dodany zostaje król z wyceną równą np. H=20.

\subsubsection{Mapa ruchu wroga}
Mapa ruchu wroga ma za zadanie pokazać w łatwo dostępnej formie, gdzie i jakimi figurami może ruszyć się przeciwnik w pewnej konkretnej sytuacji na planszy.
Zakładam, że bicie jest traktowane w tym przypadku jako normalny ruch.
Od strony programistycznej mapa ruchu wroga jest mapą, w której kluczem jest pole planszy, a wartością lista identyfikatorów figur, które mogą wykonać ruch na dane pole.

\subsubsection{Mapa wsparcia wroga}
Wprowadzam relację wsparcia zdefiniowaną w następujący sposób: figura A wspiera figurę B, jeśli w przypadku zbicia B, A może w kolejnym ruchu dokonać bicia na polu zajmowanym wcześniej przez B.
Mapa wsparcia ma za zadanie zagregować informacje dotyczące wzajemnego położenia figur wroga.
Kluczem mapy jest identyfikator figury wspieranej, a wartością lista identyfikatorów figur wspierających.

\subsection{Faza pierwsza - odpytanie o ruchy}
Algorytm rozpoczyna super-agent, który zadaje każdemu agentowi podrzędnemu pytanie o możliwe ruchy.
Odpowiedzią na żądanie jest lista ruchów, które mogą być wykonane zgodnie z zasadami gry.
W tym przypadku bicie jest również traktowane jako normalny ruch.

Struktura danych reprezentująca ruch powinna zawierać następujące dane:
\begin{itemize}
 \item Identyfikator figury
 \item Pole początkowe (source)
 \item Pole końcowe (destination)
 \item Wstępną ocenę heurystyczną ruchu
\end{itemize}

Wstępna ocena heurystyczna ma domyślnie wartość 0.
Jedynie w przypadku bicia przyjmuje wartość równą wartości ofiary.

\subsection{Faza druga - ocena ruchów}
Każdy ruch podlega ocenie przez wszystkich agentów, wliczając w to agenta zmieniającego położenie.
Faza oceny pojedynczego ruchu przebiega według następującego schematu:
\begin{enumerate}
 \item Super-agent odtwarza stan planszy po wykonaniu ruchu
 \item Super-agent buduje dla nowego stanu mapę ruchu wroga i mapę wsparcia wroga
 \item Super-agent wysyła do agentów podrzędnych pytanie o subiektywną ocenę swojego położenia
\end{enumerate}

Agenci podrzędni wyrażają swoją ocenę sytuacji w sposób egoistyczny tzn. nie interesują się pozostałymi agentami.
Ocena sytuacji jest wyrażana liczbowo i jest sumą dwóch składowych: ofensywnej i defensywnej.

Składowa ofensywna jest równa najwyższej ocenie figury wroga, znajdującej się w zasięgu rażenia.
Jeżeli figura wroga jest wspierana przez jakąkolwiek inną figurę, to składową ofensywną pomniejszamy o wartość naszej figury.

Składowa defensywna jest równa ujemnej wartości naszej figury, w przypadku gdy może ona zostać zbita (wykorzystujemy mapę ruchu wroga).
Jeśli zagrożenie nie występuje, to składowa defensywna ma wartość 0.

\subsection{Faza trzecia - wybór ruchu}

\end{document}
